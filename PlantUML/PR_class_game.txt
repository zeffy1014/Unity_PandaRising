@startuml
title ゲーム画面(ざっくり)
skinparam classAttributeIconSize 0

package Bullet {
    class BulletGenerator {
        - GameObject[] BulletPrefabs : BulletのPrefabリスト
        - GetBulletPrefab(BulletType type)
        + ShotBullet(BulletType type, float angle) : 弾と角度指定して発射
    }
    class Bullet {
        - int size
        - float speed
    }
    enum BulletType {
        Player_Mikan : メインショット
        Player_Sakana : サブウェポン魚
        Player_Block : サブウェポン岩
        Player_Kaju : 果汁レーザー
        Enemy_Point
        Enemy_Needle
        Enemy_xxx
    }
    Bullet -* BulletType
}

class GameController {
    + IReadOnlyReactiveProperty<int> Score
    + IReadOnlyReactiveProperty<int> Combo
    + IReadOnlyReactiveProperty<int> Hight
    + IReadOnlyReactiveProperty<int> Money
    + IReadOnlyReactiveProperty<float> RiseSpeed
    + IReadOnlyReactiveProperty<GameState> GameState
    + IReadOnlyReactiveProperty<xxx> ...and more!
    + OnPauseMenu(bool)
}

class AudioController {
    - GameController audioSourceHolder : AudioSource用GO
    - AudioSource sourceBGM
    - AudioSource sourceSE
    - Dictionary<int, AudioData> tableBGM : BGM番号をkeyにBGM参照するテーブル
    - Dictionary<int, AudioData> tableSE : SE番号をkeyにSE参照するテーブル
    + {static} Instance : インスタンス取得
    + LoadAudio(string key, string resName)
    + PlayBGM(key)
    + StopBGM()
    + PlaySE(key)
}
class AudioData {
    + string AudioClip clip : AudioClipとして保持する
}
AudioController *-- AudioData

enum GameState {
    Ready
    Playing
    GameOver
    StageClear
    Pause
}

class BGScroller {
    - int heightStart : スタート地点の高度
    - int heightGoal : ゴール地点の高度
    + UpdateBG(int height) : 現在高度に応じた位置に背景を出す
}

class GameArea {
    + void GetArea()
    + Vector2 GetPosFromRate(Vector2 rate)
    + Rect GetAreaRect()
}
note bottom of GameArea : ゲームウィンドウの範囲取得・\n縦横割合指定で座標取得など

package DataBase {
    class DataLibrarian{
        + {static} GetLibrarian() : インスタンス取得
        + StageInfo GetStageInfo(StageNumber)
        + 各種設定値のGet()
        + 各種設定値のUpdate()
   }
    note right of DataLibrarian : ゲーム起動時にJSONで各種情報を読み込んで\n情報取得IFを提供する\nシングルトン

    class UniversalData {
        - Array Stage構成情報[Stage_Num]
        - ReinforcementTableInfo 強化レベル対応パラメータテーブル
        - Array<string> enemyPrefabPath : 敵Prefabの格納パスリスト
        - Array<string> bulletPrefabPath : 弾Prefabの格納パスリスト
        - Array<string> BGMResources : BGMの参照Resourceリスト
        - Array<string> SEResources : SEの参照Resourceリスト
     }
     note bottom of UniversalData : 変わることのないデータ\nリソースの一部として保持

    class StageInfo {
        - StageNumber stage
        - string 敵生成テーブルの格納パス
        - string 背景画像の格納パス
        - string BGMの格納パス(ステージ・ボス)
        - int Start高度
        - int Goal高度
    }
    class ReinforcementTableInfo {
        - int[] shotPowerTable : 強化レベルに対するショット威力
        - int[] shotRapidityTable : 強化レベルに対する連射力
        - int[] houseDurabilityTable : 強化レベルに対する家のライフ最大値
        - ...
    }
    enum StageNumber {
        Tutorial,
        Stage1,
        Stage2,
        Stage3,
        Stage4,
        Stage5,

        Stage_Num
    }

    class UserData {
        - Playerの各種強化レベル
        - Houseの各種強化レベル
        - 上昇速度倍率上限
        - コンティニュー上限回数
        - ハイスコア
        - 所持金
    }
    note bottom of UserData : 強化などで変わっていくデータ

    DataLibrarian *-- UniversalData
    DataLibrarian *-- UserData

}

class Player {
    + IReadOnlyReactiveProperty<int> life
    + IReadOnlyReactiveProperty<int> bomb
}


package InputProvider {
    class InputPresenter {
    }

    interface IInputProvider {
    }
    note top of IInputProvider : PCか携帯かなどで\n紐づける入力方法を変える\n生の入力値を操作に変換

    class TouchInputProvider {
    }
    class PCInputProvider {
    }

    TouchInputProvider -up-|> IInputProvider
    PCInputProvider -up-|> IInputProvider

    package OperationHandler(MonoBehaviour) {
        class MouseOperation {}
        class KeyOperation {}
        class TouchOperation {}
    }
}

class House {
    + IReadOnlyReactiveProperty<int> life
}

package Enemy {
    class EnemyGenerator {}
    class EnemyBase {}
    Enemy_A -up-|> EnemyBase
    Enemy_B -up-|> EnemyBase

    class Block {
        + onGrab()
        + onRelease()
    }
    Block -up-|> EnemyBase
    note top of Block : 弾では撃破できず\n触れても被弾せず押したり\n掴んで投げたりできる特殊な敵
}

package UI {
    enum ButtonType {
        Shot
        Throw
        Bomb
        Menu
    }
    class OperateButton {
    }
    OperateButton -right* ButtonType
    class SlideArea{}
    class ThrowButtonView{}
    class BombButtonView{}

    class ScoreBoard {
        + Score
        + HighScore
    }
    class HightMetor {}
    class SpeedMetor {
        + SpeedMagnification
    }
    class PlayTime {}
    class Combo {}

    class LifeGauge {
        + PlayerLife
        + HouseLife
    }
    class LoadingView {
        + RemoveLoadingPanel(float sec)
    }

    class UIPresenter {

    }
}


package UnityEngine {
    class Input {}
}

/'依存関係'/
InputPresenter --> IInputProvider : 各種操作をSubscribe
TouchInputProvider --> TouchOperation : タッチ操作をSubscribe
TouchInputProvider -> OperateButton : 各種ボタン操作をSubscribe
TouchInputProvider -> SlideArea : スライド操作をSubscribe
PCInputProvider --> MouseOperation : マウス/キーボード入力を\nSubscribe
PCInputProvider --> KeyOperation : キーボード入力を\nSubscribe
KeyOperation --> Input
MouseOperation --> Input
TouchOperation --> Input

InputPresenter --> Player : 状態に応じた操作入力
InputPresenter --> GameController : 状態に応じた操作入力

Player --> BulletGenerator
EnemyBase --> BulletGenerator
BulletGenerator --> Bullet : 生成
EnemyGenerator --> EnemyBase : 生成

Player .> GameArea : (移動範囲として)ゲームウィンドウ範囲参照

UIPresenter ..> GameController : 各種表示情報参照, データ読み込み監視
UIPresenter ..> EnemyGenerator : データ読み込み監視
UIPresenter ..> BGScroller : データ読み込み監視
note on link : 各種情報\n・コンボ\n・現在高度\n・上昇速度倍率\n・スコア\n・所持金\n・時間\n・etc...
UIPresenter ..> Player : HP・ボム数・状態参照
UIPresenter ..> House : HP参照, データ読み込み監視
UIPresenter ..> BulletGenerator : データ読み込み監視

Player .> GameController : 状態参照
House .> GameController : 状態参照
InputPresenter .> GameController : 状態参照
EnemyGenerator ..> GameController : 現在高度参照
BGScroller .> GameController : 現在高度参照
GameController .> AudioController : Resource読み込み・BGM/SE再生
Player .> AudioController : Player関連SE再生
Enemy .> AudioController : Enemy関連SE再生

UIPresenter --up> BombButtonView : ボム数表示
UIPresenter --up> ThrowButtonView : 投げ状態表示
UIPresenter --up> LifeGauge : HP表示
UIPresenter --up> HightMetor : 現在高度表示
UIPresenter --up> SpeedMetor : 上昇速度倍率表示
UIPresenter --up> ScoreBoard : スコアと所持金表示
UIPresenter --up> Combo : コンボ数表示
UIPresenter --up> PlayTime : プレイ時間表示
UIPresenter --up> LoadingView : データ読み込み完了で画面除去


@enduml

◆playerとして毎フレーム取得したい入力情報(IInputProviderが提供するIF)
・ショット用の操作がされているか
　　マウスの場合は左クリック押下
　　タッチの場合は[みかん]タッチ押下
・サブ用の操作がされているか
　　マウスの場合は右クリック押下後の離され(方向)
　　タッチの場合は[魚]タッチ押下後の離され(方向)
・移動量
　　マウスの場合は前回フレームと今回フレームのカーソル移動量
　　タッチの場合は前回フレームと今回フレームの移動用タッチの移動量

InputDALというのはInput Device Abstraction Layer という造語
移動量に対する実際の移動距離の調整、ショット操作に対する発射間隔の調整などは
player側で実施する

OperationButtonではボタンの押され表現も自前で行う
ただしボタンが状況によって押せないなど非アクティブ表現する場合の対策
案１：
　別のClassを用意してGameControllerなどから情報取得して対応する
　マウスだったらクリックはいつでもできる、ただし反応するかはゲームの状況次第
　何も反応しないか、あるいはBeep音出して操作不可を表現することもありうる
案２：
　OperationButtonを利用するPlayer側から情報を伝えて表現変えてもらう

◆情報参照・受け渡しの依存関係対応
・MV(R)Pパターンを意識し
　表示部(View) + 制御部(Model) + 受け渡し部？(Presenter)でやり取りする
　ViewとModelは直接互いを参照しない
　Viewの入力操作やModelの変化をPresenterで取得・処理し、View/Modelへ反映する
　PresenterがViewやModelを参照するが、ここでDependency Injection で参照する

・DIにはZenject(Extenject)を使う
・入力操作や状態変化はUniRxのPublish/Subscribeの仕組みで監視する

◆データ読み込み
・DataBase::DataLibrarianという管理人(Singleton)を経由して取得する
　取得する情報は以下の内容で、いずれもJSONファイルで管理する
　- UniversalData
　　　背景画像やBGM, EnemyやBulletのPrefab, 各種強化レベルに対するパラメータなど
　　　ゲームに埋め込まれている各種設定
　　　画像などはパスの情報を保持しており、そのパスから更に使う人がLoadする
　- UserData
　　　所持金やハイスコア, 各種強化レベルなどプレー中に変わる所謂セーブデータ
　何のデータにどんなフィールドがあるか詳細は別ファイルにまとめる

・データ読み込みするモジュールはプレー画面のシーン読み込み時に各自読み込む
　読み込み中はLoading画面を表示する
　データ読み込みするモジュールはILoadDataというIFで読み込み完了監視用ReactivePropertyを持ち監視される
　すべて読み込み完了したらLoading画面が除去されてプレー画面表示、操作可能となる

◆接触判定検討
接触は常に判定されてよい　接触対象のタグなどで処理を判断する
その上で消えたりダメージ与えたりというOnTriggerEnter2D的処理と
物理的に影響しあうものどうし

                │ PBM  PBF  PBB  PBL  EB    Pl       En      Bl        Wa
----------------│------------------------------------------------------------
Player Bullet M │  -    -    -    -   -     -     PB消/Enダ  PB消      PB消
Player Bullet F |       -    -    -   -   PB回収  PB消/Enダ  押合      PB反
Player Bullet B |            -    -  EB消   -     PB消/Enダ PB貫/爆発  PB消
Player Bullet L |                 -   -     -     PB貫/Enダ  PB切       -
Enemy Bullet    │                     -  EB消/Plダ    -       -        EB消
Player          │         (省略)            -     Plダ/En消  押合       -
Enemy           │                                     -       -      En消(家ダ)
Block           │                                            押合    Bl消(家ダ)

メモ書き
　基本的に弾どうしは接触しないがPlayer-Bullet-BはEnemyの弾も消せるといい？
　Enemy, Blockどうしは接触しない
　物理的な挙動をするのは弾全般とBlock、Player？
　弾はIsTriggerで壁をすり抜けるが魚だけはIsTriggerなしのColliderもつけて壁やBlockに跳ね返る
　壁は動かないのでIsKinematic
　Blockは動くが質量が非常に大きいのであまり押し返せない(試してみないとわからん)
　Blockどうしも押し合いなので生成配置に注意
　LaserはBlockで止まるがEnemyを貫通すべきかは要検討
　Playerの体当たりでEnemyは基本的に消えるが、一部は消えない

Unityメモ
　接触するColliderどうしのどちらかにIsTriggerが入っていると物理的な当たり判定が発生しない
　Trrigerも物理的当たり判定も欲しい場合はCollider2つつける　イベント多重発生注意
